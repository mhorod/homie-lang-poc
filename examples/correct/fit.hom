// fit.hom

dis Nat {
    Zero,
    Succ(n: Nat)
}

fun f(n: Nat) -> Nat {
    // Dis variants can be matched using `fit` expression
    ret fit n {
        Zero => n,
        Succ _ => n.n
    };
}

fun accept_succ(n: Nat::Succ) {}
fun g(n: Nat) {
    // After fitting a variable it has the variant type in the branch
    fit n {
        Zero => Nat::Zero,
        Succ _ => accept_succ(n) // Here n has type Nat::Succ
    };
}

fun fit_as_statement(n: Nat) {
    // Fit can also be used as a statement, not expression
    fit n {
        Zero => ret Nat::Succ(n),
    };
    ret n;
}


fun main() {}
