// mergesort.hom

// Mergesort implemented on numbers and lists defined as dises

dis List[T] {
    Nil,
    Cons(x: T, xs: List[T])
}

dis Pair[T, U] {
    Pair(fst: T, snd: U)
}

dis Nat {
    Zero,
    Succ(n: Nat)
}

dis Bool {
    True,
    False
}

fun less(a: Nat, b: Nat) -> Bool {
    let p = Pair[Nat, Nat]::Pair(a, b);
    ret fit p {
        Pair _ Zero => Bool::False,
        Pair Zero _ => Bool::True,
        Pair (Succ _) (Succ _) => less(p.fst.n, p.snd.n)
    };
}

fun len(xs: List[Nat]) -> Nat {
    ret fit xs {
        Nil => Nat::Zero,
        Cons _ _ => Nat::Succ (len(xs.xs))
    };
}

fun fmap[T, U](f: T -> U, xs: List[T]) -> List[U] {
    ret fit xs {
        Nil => List[U]::Nil,
        Cons _ _ => List[U]::Cons(f(xs.x), fmap[T, U](f, xs.xs))
    };
}

fun mapPair[T, U](f: T -> U, p: Pair[T, T]::Pair) -> Pair[U, U]::Pair {
    ret Pair[U, U]::Pair (f(p.fst), f(p.snd));
}

fun half[T](xs: List[T]) -> Pair[List[T], List[T]]::Pair {
    let rest = fit xs {
        Nil => Pair[List[T], List[T]]::Pair(List[T]::Nil, List[T]::Nil),
        Cons _ Nil => Pair[List[T], List[T]]::Pair(xs, List[T]::Nil),
        Cons _ (Cons _ _) => half[T](xs.xs.xs)
    };
    ret fit xs {
        Cons _ (Cons _ _) => Pair[List[T], List[T]]::Pair(List[T]::Cons(xs.x, rest.fst), List[T]::Cons(xs.xs.x, rest.snd)),
        _ => rest
    };
}

fun merge[T](xs: List[T], ys: List[T], less: (T, T) -> Bool) -> List[T] {
    let p = Pair[List[T], List[T]]::Pair(xs, ys);
    ret fit p {
        Pair Nil Nil => List[T]::Nil,
        Pair Nil _ => p.snd,
        Pair _ Nil => p.fst,
        Pair (Cons _ _) (Cons _ _) => fit less(p.fst.x, p.snd.x) {
            True => List[T]::Cons(p.fst.x, merge[T](p.fst.xs, p.snd, less)),
            False => List[T]::Cons(p.snd.x, merge[T](p.fst, p.snd.xs, less))
        }
    };
}

fun sort[T](xs: List[T], less: (T, T) -> Bool) -> List[T] {
    let halves = half[T](xs);
    ret fit xs {
        Nil => List[T]::Nil,
        Cons _ Nil => xs,
        Cons _ _ => merge[T](sort[T](halves.fst, less), sort[T](halves.snd, less), less),
    };
}

dis Dig {
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine
}

fun nat_to_dig(n: Nat) -> Dig {
    ret fit n {
        Zero => Dig::Zero,
        Succ Zero => Dig::One,
        Succ (Succ Zero) => Dig::Two,
        Succ (Succ (Succ Zero)) => Dig::Three,
        Succ (Succ (Succ (Succ Zero))) => Dig::Four,
        Succ (Succ (Succ (Succ (Succ Zero)))) => Dig::Five,
        Succ (Succ (Succ (Succ (Succ (Succ Zero))))) => Dig::Six,
        Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))) => Dig::Seven,
        Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero))))))) => Dig::Eight,
        Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))))) => Dig::Nine,
    };
}

fun print(n: Dig) {
    fit n {
        Zero => wrt "0",
        One => wrt "1",
        Two => wrt "2",
        Three => wrt "3",
        Four => wrt "4",
        Five => wrt "5",
        Six => wrt "6",
        Seven => wrt "7",
        Eight => wrt "8",
        Nine => wrt "9"
    };
}

fun print_with_space(n: Dig) -> Void {
    print(n);
    wrt " ";
}

fun cons(x: Nat, xs: List[Nat]) -> List[Nat] {
    ret List[Nat]::Cons(x, xs);
}

fun main() {
    let zero = Nat::Zero;
    let one = Nat::Succ(zero);
    let two = Nat::Succ(one);
    let three = Nat::Succ(two);
    let four = Nat::Succ(three);
    let five = Nat::Succ(four);
    let six = Nat::Succ(five);
    let seven = Nat::Succ(six);
    let eight = Nat::Succ(seven);
    let nine = Nat::Succ(eight);
    let ten = Nat::Succ(nine);

    let xs = cons(one, cons(five, cons(three, cons(seven, cons(four, cons(three, cons(seven, cons(four, cons(eight, List[Nat]::Nil)))))))));
    let sorted = sort[Nat](xs, less);
    let digified = (fmap[Nat, Dig](nat_to_dig, sorted));
    fmap[Dig, Void](print_with_space, digified);
}
